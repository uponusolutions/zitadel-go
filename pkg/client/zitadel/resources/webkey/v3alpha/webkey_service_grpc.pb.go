// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: zitadel/resources/webkey/v3alpha/webkey_service.proto

package webkey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ZITADELWebKeys_CreateWebKey_FullMethodName   = "/zitadel.resources.webkey.v3alpha.ZITADELWebKeys/CreateWebKey"
	ZITADELWebKeys_ActivateWebKey_FullMethodName = "/zitadel.resources.webkey.v3alpha.ZITADELWebKeys/ActivateWebKey"
	ZITADELWebKeys_DeleteWebKey_FullMethodName   = "/zitadel.resources.webkey.v3alpha.ZITADELWebKeys/DeleteWebKey"
	ZITADELWebKeys_ListWebKeys_FullMethodName    = "/zitadel.resources.webkey.v3alpha.ZITADELWebKeys/ListWebKeys"
)

// ZITADELWebKeysClient is the client API for ZITADELWebKeys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZITADELWebKeysClient interface {
	CreateWebKey(ctx context.Context, in *CreateWebKeyRequest, opts ...grpc.CallOption) (*CreateWebKeyResponse, error)
	ActivateWebKey(ctx context.Context, in *ActivateWebKeyRequest, opts ...grpc.CallOption) (*ActivateWebKeyResponse, error)
	DeleteWebKey(ctx context.Context, in *DeleteWebKeyRequest, opts ...grpc.CallOption) (*DeleteWebKeyResponse, error)
	ListWebKeys(ctx context.Context, in *ListWebKeysRequest, opts ...grpc.CallOption) (*ListWebKeysResponse, error)
}

type zITADELWebKeysClient struct {
	cc grpc.ClientConnInterface
}

func NewZITADELWebKeysClient(cc grpc.ClientConnInterface) ZITADELWebKeysClient {
	return &zITADELWebKeysClient{cc}
}

func (c *zITADELWebKeysClient) CreateWebKey(ctx context.Context, in *CreateWebKeyRequest, opts ...grpc.CallOption) (*CreateWebKeyResponse, error) {
	out := new(CreateWebKeyResponse)
	err := c.cc.Invoke(ctx, ZITADELWebKeys_CreateWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zITADELWebKeysClient) ActivateWebKey(ctx context.Context, in *ActivateWebKeyRequest, opts ...grpc.CallOption) (*ActivateWebKeyResponse, error) {
	out := new(ActivateWebKeyResponse)
	err := c.cc.Invoke(ctx, ZITADELWebKeys_ActivateWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zITADELWebKeysClient) DeleteWebKey(ctx context.Context, in *DeleteWebKeyRequest, opts ...grpc.CallOption) (*DeleteWebKeyResponse, error) {
	out := new(DeleteWebKeyResponse)
	err := c.cc.Invoke(ctx, ZITADELWebKeys_DeleteWebKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zITADELWebKeysClient) ListWebKeys(ctx context.Context, in *ListWebKeysRequest, opts ...grpc.CallOption) (*ListWebKeysResponse, error) {
	out := new(ListWebKeysResponse)
	err := c.cc.Invoke(ctx, ZITADELWebKeys_ListWebKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZITADELWebKeysServer is the server API for ZITADELWebKeys service.
// All implementations must embed UnimplementedZITADELWebKeysServer
// for forward compatibility
type ZITADELWebKeysServer interface {
	CreateWebKey(context.Context, *CreateWebKeyRequest) (*CreateWebKeyResponse, error)
	ActivateWebKey(context.Context, *ActivateWebKeyRequest) (*ActivateWebKeyResponse, error)
	DeleteWebKey(context.Context, *DeleteWebKeyRequest) (*DeleteWebKeyResponse, error)
	ListWebKeys(context.Context, *ListWebKeysRequest) (*ListWebKeysResponse, error)
	mustEmbedUnimplementedZITADELWebKeysServer()
}

// UnimplementedZITADELWebKeysServer must be embedded to have forward compatible implementations.
type UnimplementedZITADELWebKeysServer struct {
}

func (UnimplementedZITADELWebKeysServer) CreateWebKey(context.Context, *CreateWebKeyRequest) (*CreateWebKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebKey not implemented")
}
func (UnimplementedZITADELWebKeysServer) ActivateWebKey(context.Context, *ActivateWebKeyRequest) (*ActivateWebKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateWebKey not implemented")
}
func (UnimplementedZITADELWebKeysServer) DeleteWebKey(context.Context, *DeleteWebKeyRequest) (*DeleteWebKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebKey not implemented")
}
func (UnimplementedZITADELWebKeysServer) ListWebKeys(context.Context, *ListWebKeysRequest) (*ListWebKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebKeys not implemented")
}
func (UnimplementedZITADELWebKeysServer) mustEmbedUnimplementedZITADELWebKeysServer() {}

// UnsafeZITADELWebKeysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZITADELWebKeysServer will
// result in compilation errors.
type UnsafeZITADELWebKeysServer interface {
	mustEmbedUnimplementedZITADELWebKeysServer()
}

func RegisterZITADELWebKeysServer(s grpc.ServiceRegistrar, srv ZITADELWebKeysServer) {
	s.RegisterService(&ZITADELWebKeys_ServiceDesc, srv)
}

func _ZITADELWebKeys_CreateWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZITADELWebKeysServer).CreateWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZITADELWebKeys_CreateWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZITADELWebKeysServer).CreateWebKey(ctx, req.(*CreateWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZITADELWebKeys_ActivateWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZITADELWebKeysServer).ActivateWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZITADELWebKeys_ActivateWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZITADELWebKeysServer).ActivateWebKey(ctx, req.(*ActivateWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZITADELWebKeys_DeleteWebKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZITADELWebKeysServer).DeleteWebKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZITADELWebKeys_DeleteWebKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZITADELWebKeysServer).DeleteWebKey(ctx, req.(*DeleteWebKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZITADELWebKeys_ListWebKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZITADELWebKeysServer).ListWebKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ZITADELWebKeys_ListWebKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZITADELWebKeysServer).ListWebKeys(ctx, req.(*ListWebKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ZITADELWebKeys_ServiceDesc is the grpc.ServiceDesc for ZITADELWebKeys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ZITADELWebKeys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zitadel.resources.webkey.v3alpha.ZITADELWebKeys",
	HandlerType: (*ZITADELWebKeysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebKey",
			Handler:    _ZITADELWebKeys_CreateWebKey_Handler,
		},
		{
			MethodName: "ActivateWebKey",
			Handler:    _ZITADELWebKeys_ActivateWebKey_Handler,
		},
		{
			MethodName: "DeleteWebKey",
			Handler:    _ZITADELWebKeys_DeleteWebKey_Handler,
		},
		{
			MethodName: "ListWebKeys",
			Handler:    _ZITADELWebKeys_ListWebKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zitadel/resources/webkey/v3alpha/webkey_service.proto",
}
