// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: zitadel/resources/webkey/v3alpha/webkey_service.proto

package webkey

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/zitadel/zitadel-go/v3/pkg/client/zitadel/protoc/v2"
	v3alpha "github.com/zitadel/zitadel/pkg/grpc/object/v3alpha"
	v3alpha1 "github.com/zitadel/zitadel/pkg/grpc/resources/object/v3alpha"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateWebKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *v3alpha.Instance `protobuf:"bytes,1,opt,name=instance,proto3,oneof" json:"instance,omitempty"`
	Key      *WebKey           `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *CreateWebKeyRequest) Reset() {
	*x = CreateWebKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebKeyRequest) ProtoMessage() {}

func (x *CreateWebKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateWebKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWebKeyRequest) GetInstance() *v3alpha.Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *CreateWebKeyRequest) GetKey() *WebKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type CreateWebKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v3alpha1.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *CreateWebKeyResponse) Reset() {
	*x = CreateWebKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebKeyResponse) ProtoMessage() {}

func (x *CreateWebKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateWebKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWebKeyResponse) GetDetails() *v3alpha1.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type ActivateWebKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *v3alpha.Instance `protobuf:"bytes,1,opt,name=instance,proto3,oneof" json:"instance,omitempty"`
	Id       string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ActivateWebKeyRequest) Reset() {
	*x = ActivateWebKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateWebKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateWebKeyRequest) ProtoMessage() {}

func (x *ActivateWebKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateWebKeyRequest.ProtoReflect.Descriptor instead.
func (*ActivateWebKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{2}
}

func (x *ActivateWebKeyRequest) GetInstance() *v3alpha.Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *ActivateWebKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ActivateWebKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v3alpha1.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *ActivateWebKeyResponse) Reset() {
	*x = ActivateWebKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateWebKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateWebKeyResponse) ProtoMessage() {}

func (x *ActivateWebKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateWebKeyResponse.ProtoReflect.Descriptor instead.
func (*ActivateWebKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{3}
}

func (x *ActivateWebKeyResponse) GetDetails() *v3alpha1.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type DeleteWebKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *v3alpha.Instance `protobuf:"bytes,1,opt,name=instance,proto3,oneof" json:"instance,omitempty"`
	Id       string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteWebKeyRequest) Reset() {
	*x = DeleteWebKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebKeyRequest) ProtoMessage() {}

func (x *DeleteWebKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteWebKeyRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteWebKeyRequest) GetInstance() *v3alpha.Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *DeleteWebKeyRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteWebKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details *v3alpha1.Details `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *DeleteWebKeyResponse) Reset() {
	*x = DeleteWebKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWebKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWebKeyResponse) ProtoMessage() {}

func (x *DeleteWebKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWebKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteWebKeyResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteWebKeyResponse) GetDetails() *v3alpha1.Details {
	if x != nil {
		return x.Details
	}
	return nil
}

type ListWebKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance *v3alpha.Instance `protobuf:"bytes,1,opt,name=instance,proto3,oneof" json:"instance,omitempty"`
}

func (x *ListWebKeysRequest) Reset() {
	*x = ListWebKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebKeysRequest) ProtoMessage() {}

func (x *ListWebKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebKeysRequest.ProtoReflect.Descriptor instead.
func (*ListWebKeysRequest) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListWebKeysRequest) GetInstance() *v3alpha.Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

type ListWebKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebKeys []*GetWebKey `protobuf:"bytes,1,rep,name=web_keys,json=webKeys,proto3" json:"web_keys,omitempty"`
}

func (x *ListWebKeysResponse) Reset() {
	*x = ListWebKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWebKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWebKeysResponse) ProtoMessage() {}

func (x *ListWebKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWebKeysResponse.ProtoReflect.Descriptor instead.
func (*ListWebKeysResponse) Descriptor() ([]byte, []int) {
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListWebKeysResponse) GetWebKeys() []*GetWebKey {
	if x != nil {
		return x.WebKeys
	}
	return nil
}

var File_zitadel_resources_webkey_v3alpha_webkey_service_proto protoreflect.FileDescriptor

var file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65,
	0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2f, 0x6b, 0x65, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcf,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64,
	0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x3a,
	0x27, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x48, 0x4f,
	0x53, 0x54, 0x20, 0x6f, 0x72, 0x20, 0x3a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e,
	0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xd2, 0x01,
	0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x2c, 0x92, 0x41, 0x29,
	0x3a, 0x27, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x48,
	0x4f, 0x53, 0x54, 0x20, 0x6f, 0x72, 0x20, 0x3a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39, 0x36, 0x32,
	0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01, 0x18, 0xc8,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x5d, 0x0a, 0x16, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x33, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x2c, 0x92,
	0x41, 0x29, 0x3a, 0x27, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x48, 0x4f, 0x53, 0x54, 0x20, 0x6f, 0x72, 0x20, 0x3a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x48, 0x00, 0x52, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x1b, 0x4a, 0x13, 0x22, 0x36, 0x39,
	0x36, 0x32, 0x39, 0x30, 0x32, 0x36, 0x38, 0x30, 0x36, 0x34, 0x38, 0x39, 0x34, 0x35, 0x35, 0x22,
	0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x10, 0x01,
	0x18, 0xc8, 0x01, 0x52, 0x02, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x5b, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74,
	0x61, 0x64, 0x65, 0x6c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x76, 0x33, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x3a, 0x27, 0x22, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20,
	0x48, 0x4f, 0x53, 0x54, 0x20, 0x6f, 0x72, 0x20, 0x3a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x5d, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x08, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x73, 0x32, 0xb5, 0x0d, 0x0a, 0x0e, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45,
	0x4c, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x9f, 0x03, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x65,
	0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x02, 0x92, 0x41, 0xd5, 0x01, 0x12,
	0x28, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x77, 0x65, 0x62, 0x20,
	0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x69, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x9b, 0x01, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61,
	0x69, 0x72, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x6b, 0x65, 0x79, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x20, 0x6b, 0x65, 0x79, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x74, 0x6f, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x74, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04,
	0x0a, 0x02, 0x4f, 0x4b, 0x8a, 0xb5, 0x18, 0x1a, 0x0a, 0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e,
	0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x03, 0x08,
	0xc9, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x1b, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x12, 0xde, 0x04, 0x0a, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x2e,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65,
	0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd8, 0x03, 0x92, 0x41, 0x84, 0x03, 0x12, 0x27, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x20, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6b, 0x65, 0x79, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0xcb, 0x02, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x65, 0x62,
	0x20, 0x6b, 0x65, 0x79, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x6c, 0x79, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x6b, 0x65, 0x79, 0x20,
	0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x20, 0x4e, 0x6f, 0x74, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x4a, 0x57, 0x4b, 0x73, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x20, 0x61, 0x20,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x69, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61, 0x64, 0x76, 0x69, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x6b, 0x65,
	0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x28, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x69, 0x73, 0x20, 0x35, 0x6d,
	0x69, 0x6e, 0x29, 0x2c, 0x20, 0x61, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68,
	0x61, 0x76, 0x65, 0x20, 0x62, 0x65, 0x65, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x61, 0x63, 0x68, 0x65, 0x73, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x79, 0x65, 0x74, 0x2e, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x8a, 0xb5, 0x18, 0x1a, 0x0a,
	0x13, 0x0a, 0x11, 0x69, 0x61, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x03, 0x08, 0xc8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22,
	0x2a, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x81, 0x03, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x35, 0x2e, 0x7a,
	0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76,
	0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x65, 0x62,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x02, 0x92, 0x41,
	0xb6, 0x01, 0x12, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x77, 0x65, 0x62,
	0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x69, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x7f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x77, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x70, 0x61, 0x69,
	0x72, 0x2e, 0x20, 0x4f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x6b, 0x65, 0x79, 0x73, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x2e, 0x20, 0x4f, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x20, 0x6b, 0x65, 0x79,
	0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x2c, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x62,
	0x79, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x62, 0x65, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x4a, 0x0b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x8a, 0xb5, 0x18, 0x1b, 0x0a, 0x14, 0x0a, 0x12,
	0x69, 0x61, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x03, 0x08, 0xc8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x9b, 0x02, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x34, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79,
	0x2e, 0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x92,
	0x41, 0x5b, 0x12, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x77, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79,
	0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x20,
	0x77, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x8a, 0xb5, 0x18,
	0x19, 0x0a, 0x12, 0x0a, 0x10, 0x69, 0x61, 0x6d, 0x2e, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79,
	0x2e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x03, 0x08, 0xc8, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x33, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x77, 0x65, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x42, 0xce, 0x08,
	0x92, 0x41, 0x85, 0x08, 0x12, 0xe3, 0x02, 0x0a, 0x0f, 0x57, 0x65, 0x62, 0x20, 0x6b, 0x65, 0x79,
	0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xce, 0x01, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x41, 0x50, 0x49, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x20, 0x77, 0x65, 0x62, 0x20, 0x6b, 0x65,
	0x79, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2c, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x20, 0x4f, 0x49, 0x44, 0x43, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x69, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x20, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x20, 0x49, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x41, 0x4e, 0x44, 0x20, 0x77,
	0x69, 0x6c, 0x6c, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x20, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x61, 0x20, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x2e, 0x22, 0x2e, 0x0a, 0x07, 0x5a, 0x49, 0x54,
	0x41, 0x44, 0x45, 0x4c, 0x12, 0x13, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x1a, 0x0e, 0x68, 0x69, 0x40, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x42, 0x0a, 0x0a, 0x41, 0x70, 0x61,
	0x63, 0x68, 0x65, 0x20, 0x32, 0x2e, 0x30, 0x12, 0x34, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x62, 0x6c, 0x6f, 0x62,
	0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x0b, 0x33,
	0x2e, 0x30, 0x2d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x0e, 0x24, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x22, 0x01, 0x2f, 0x2a, 0x02, 0x02,
	0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x32, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x3a, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x77, 0x65, 0x62, 0x2b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x6d, 0x0a, 0x03, 0x34, 0x30, 0x33, 0x12, 0x66, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
	0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x50, 0x0a, 0x03, 0x34, 0x30, 0x34, 0x12, 0x49, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x2e, 0x12, 0x1b, 0x0a, 0x19, 0x1a, 0x17, 0x23, 0x2f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5a, 0xc2, 0x01, 0x0a, 0xbf, 0x01, 0x0a, 0x06, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32,
	0x12, 0xb4, 0x01, 0x08, 0x03, 0x28, 0x04, 0x32, 0x21, 0x24, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d,
	0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x32,
	0x2f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x3a, 0x1d, 0x24, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x2d, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x32, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x6c, 0x0a, 0x10, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x58, 0x0a,
	0x2a, 0x75, 0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d,
	0x3a, 0x6f, 0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a,
	0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x12, 0x2a, 0x75, 0x72, 0x6e,
	0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f, 0x72, 0x67,
	0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69, 0x74, 0x61,
	0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x62, 0x40, 0x0a, 0x3e, 0x0a, 0x06, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x12, 0x34, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x0a, 0x2a, 0x75,
	0x72, 0x6e, 0x3a, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x69, 0x61, 0x6d, 0x3a, 0x6f,
	0x72, 0x67, 0x3a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x3a, 0x69, 0x64, 0x3a, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x3a, 0x61, 0x75, 0x64, 0x72, 0x3e, 0x0a, 0x22, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x5a, 0x49, 0x54, 0x41, 0x44, 0x45, 0x4c, 0x12,
	0x18, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x69, 0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x7a, 0x69,
	0x74, 0x61, 0x64, 0x65, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x2f,
	0x76, 0x33, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x77, 0x65, 0x62, 0x6b, 0x65, 0x79, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescOnce sync.Once
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescData = file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDesc
)

func file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescGZIP() []byte {
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescOnce.Do(func() {
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescData)
	})
	return file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDescData
}

var file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_zitadel_resources_webkey_v3alpha_webkey_service_proto_goTypes = []interface{}{
	(*CreateWebKeyRequest)(nil),    // 0: zitadel.resources.webkey.v3alpha.CreateWebKeyRequest
	(*CreateWebKeyResponse)(nil),   // 1: zitadel.resources.webkey.v3alpha.CreateWebKeyResponse
	(*ActivateWebKeyRequest)(nil),  // 2: zitadel.resources.webkey.v3alpha.ActivateWebKeyRequest
	(*ActivateWebKeyResponse)(nil), // 3: zitadel.resources.webkey.v3alpha.ActivateWebKeyResponse
	(*DeleteWebKeyRequest)(nil),    // 4: zitadel.resources.webkey.v3alpha.DeleteWebKeyRequest
	(*DeleteWebKeyResponse)(nil),   // 5: zitadel.resources.webkey.v3alpha.DeleteWebKeyResponse
	(*ListWebKeysRequest)(nil),     // 6: zitadel.resources.webkey.v3alpha.ListWebKeysRequest
	(*ListWebKeysResponse)(nil),    // 7: zitadel.resources.webkey.v3alpha.ListWebKeysResponse
	(*v3alpha.Instance)(nil),       // 8: zitadel.object.v3alpha.Instance
	(*WebKey)(nil),                 // 9: zitadel.resources.webkey.v3alpha.WebKey
	(*v3alpha1.Details)(nil),       // 10: zitadel.resources.object.v3alpha.Details
	(*GetWebKey)(nil),              // 11: zitadel.resources.webkey.v3alpha.GetWebKey
}
var file_zitadel_resources_webkey_v3alpha_webkey_service_proto_depIdxs = []int32{
	8,  // 0: zitadel.resources.webkey.v3alpha.CreateWebKeyRequest.instance:type_name -> zitadel.object.v3alpha.Instance
	9,  // 1: zitadel.resources.webkey.v3alpha.CreateWebKeyRequest.key:type_name -> zitadel.resources.webkey.v3alpha.WebKey
	10, // 2: zitadel.resources.webkey.v3alpha.CreateWebKeyResponse.details:type_name -> zitadel.resources.object.v3alpha.Details
	8,  // 3: zitadel.resources.webkey.v3alpha.ActivateWebKeyRequest.instance:type_name -> zitadel.object.v3alpha.Instance
	10, // 4: zitadel.resources.webkey.v3alpha.ActivateWebKeyResponse.details:type_name -> zitadel.resources.object.v3alpha.Details
	8,  // 5: zitadel.resources.webkey.v3alpha.DeleteWebKeyRequest.instance:type_name -> zitadel.object.v3alpha.Instance
	10, // 6: zitadel.resources.webkey.v3alpha.DeleteWebKeyResponse.details:type_name -> zitadel.resources.object.v3alpha.Details
	8,  // 7: zitadel.resources.webkey.v3alpha.ListWebKeysRequest.instance:type_name -> zitadel.object.v3alpha.Instance
	11, // 8: zitadel.resources.webkey.v3alpha.ListWebKeysResponse.web_keys:type_name -> zitadel.resources.webkey.v3alpha.GetWebKey
	0,  // 9: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.CreateWebKey:input_type -> zitadel.resources.webkey.v3alpha.CreateWebKeyRequest
	2,  // 10: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.ActivateWebKey:input_type -> zitadel.resources.webkey.v3alpha.ActivateWebKeyRequest
	4,  // 11: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.DeleteWebKey:input_type -> zitadel.resources.webkey.v3alpha.DeleteWebKeyRequest
	6,  // 12: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.ListWebKeys:input_type -> zitadel.resources.webkey.v3alpha.ListWebKeysRequest
	1,  // 13: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.CreateWebKey:output_type -> zitadel.resources.webkey.v3alpha.CreateWebKeyResponse
	3,  // 14: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.ActivateWebKey:output_type -> zitadel.resources.webkey.v3alpha.ActivateWebKeyResponse
	5,  // 15: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.DeleteWebKey:output_type -> zitadel.resources.webkey.v3alpha.DeleteWebKeyResponse
	7,  // 16: zitadel.resources.webkey.v3alpha.ZITADELWebKeys.ListWebKeys:output_type -> zitadel.resources.webkey.v3alpha.ListWebKeysResponse
	13, // [13:17] is the sub-list for method output_type
	9,  // [9:13] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_zitadel_resources_webkey_v3alpha_webkey_service_proto_init() }
func file_zitadel_resources_webkey_v3alpha_webkey_service_proto_init() {
	if File_zitadel_resources_webkey_v3alpha_webkey_service_proto != nil {
		return
	}
	file_zitadel_resources_webkey_v3alpha_key_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateWebKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateWebKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWebKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWebKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zitadel_resources_webkey_v3alpha_webkey_service_proto_goTypes,
		DependencyIndexes: file_zitadel_resources_webkey_v3alpha_webkey_service_proto_depIdxs,
		MessageInfos:      file_zitadel_resources_webkey_v3alpha_webkey_service_proto_msgTypes,
	}.Build()
	File_zitadel_resources_webkey_v3alpha_webkey_service_proto = out.File
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_rawDesc = nil
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_goTypes = nil
	file_zitadel_resources_webkey_v3alpha_webkey_service_proto_depIdxs = nil
}
